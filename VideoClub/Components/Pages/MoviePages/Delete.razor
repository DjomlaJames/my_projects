@page "/delete"
@using Microsoft.EntityFrameworkCore
@using VideoClub.Models
@inject IDbContextFactory<VideoClub.Data.VideoClubContext> DbFactory
@inject NavigationManager NavigationManager
@inject VideoClub.Services.SessionService SessionService

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (!isAdmin)
{
    <p class="text-danger">Access Denied. </p>
}
else
{
    <p>Are you sure you want to delete this?</p>
    <div>
        <h2>Movie</h2>
        <hr />
        @if (movie is null)
        {
            <p><em>Loading...</em></p>
        }
        else 
        {
            <dl class="row">
                <dt class="col-sm-2">Title</dt>
                <dd class="col-sm-10">@movie.Title</dd>
            </dl>
            <dl class="row">
                <dt class="col-sm-2">Release Year</dt>
                <dd class="col-sm-10">@movie.DateRelease</dd>
            </dl>
            <dl class="row">
                <dt class="col-sm-2">Genre</dt>
                <dd class="col-sm-10">@movie.Genre</dd>
            </dl>
            <dl class="row">
                <dt class="col-sm-2">Rating</dt>
                <dd class="col-sm-10">@movie.Rating</dd>
            </dl>
            <dl class="row">
                <dt class="col-sm-2">Copies</dt>
                <dd class="col-sm-10">@movie.Stocks</dd>
            </dl>
            <dl class="row">
                <dt class="col-sm-2">Price</dt>
                <dd class="col-sm-10">@movie.Price</dd>
            </dl>
            <EditForm method="post" Model="movie" OnValidSubmit="DeleteMovie" FormName="delete" Enhance>
                <button type="submit" class="btn btn-danger" disabled="@(movie is null)">Delete</button> |
                <a href="/movies">Back to List</a>
            </EditForm>
        }
    </div>
}

@code {
    private Movie? movie;
    private bool isAdmin = false;
    private bool isLoading = true;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        using var context = DbFactory.CreateDbContext();
        
        // Proveravamo ulogu korisnika
        var userRole = await SessionService.GetUserRole();
        isAdmin = userRole == "admin";

        

        movie = await context.Movies.FirstOrDefaultAsync(m => m.Id == Id);

        if (movie is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        isLoading = false;
    }

    private async Task DeleteMovie()
    {
        using var context = DbFactory.CreateDbContext();
        context.Movies.Remove(movie!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/");
    }
}
