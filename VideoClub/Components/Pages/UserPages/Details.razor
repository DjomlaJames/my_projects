@page "/users/details"
@using Microsoft.EntityFrameworkCore
@using VideoClub.Models
@inject IDbContextFactory<VideoClub.Data.VideoClubContext> DbFactory
@inject NavigationManager NavigationManager
@inject VideoClub.Services.SessionService SessionService

<PageTitle>User Details</PageTitle>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (!isAdmin)
{
    <p>You are not authorized to view this page.</p>
}
else if (user is null)
{
    <p>User not found.</p>
}
else
{
    <h1>User Details</h1>

    <dl class="row">
        <dt class="col-sm-2">ID</dt>
        <dd class="col-sm-10">@user.Id</dd>
        <dt class="col-sm-2">First Name</dt>
        <dd class="col-sm-10">@user.FirstName</dd>
        <dt class="col-sm-2">Last Name</dt>
        <dd class="col-sm-10">@user.LastName</dd>
        <dt class="col-sm-2">Username</dt>
        <dd class="col-sm-10">@user.Username</dd>
        <dt class="col-sm-2">Email</dt>
        <dd class="col-sm-10">@user.Email</dd>
        <dt class="col-sm-2">Role</dt>
        <dd class="col-sm-10">@user.Role</dd>
    </dl>

    <div>
        <a href="@($"/users/edit?id={user.Id}")">Edit</a> |
        <a href="@($"/users")">Back to List</a>
    </div>
}

@code {
    private User? user;
    private bool isAdmin = false;
    private bool isLoading = true;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var userRole = await SessionService.GetUserRole();
        isAdmin = userRole == "admin";
        isLoading = false;

        

        using var context = DbFactory.CreateDbContext();
        user = await context.Users.FirstOrDefaultAsync(m => m.Id == Id);
    }
}
