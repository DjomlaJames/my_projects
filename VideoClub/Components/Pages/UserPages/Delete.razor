@page "/users/delete"
@using Microsoft.EntityFrameworkCore
@using VideoClub.Models
@inject IDbContextFactory<VideoClub.Data.VideoClubContext> DbFactory
@inject NavigationManager NavigationManager
@inject VideoClub.Services.SessionService SessionService

<PageTitle>Delete User</PageTitle>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (!isAdmin)
{
    <p>You are not authorized to delete users.</p>
}
else if (user is null)
{
    <p>User not found.</p>
}
else
{
    <h1>Delete</h1>

    <p class="text-danger">Are you sure you want to delete this user?</p>

    <div>
        <h2>User</h2>
        <hr />
        <dl class="row">
            <dt class="col-sm-2">First Name</dt>
            <dd class="col-sm-10">@user.FirstName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Last Name</dt>
            <dd class="col-sm-10">@user.LastName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Username</dt>
            <dd class="col-sm-10">@user.Username</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@user.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Role</dt>
            <dd class="col-sm-10">@user.Role</dd>
        </dl>

        @if (isSelfDelete)
        {
            <p class="text-danger">You cannot delete your own account.</p>
        }

        <EditForm method="post" Model="user" OnValidSubmit="DeleteUser" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@isSelfDelete">Delete</button> |
            <a href="/users">Back to List</a>
        </EditForm>
    </div>
}

@code {
    private User? user;
    private bool isAdmin = false;
    private bool isLoading = true;
    private bool isSelfDelete = false;
    private string? loggedInUsername;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            loggedInUsername = await SessionService.GetUser();
            var userRole = await SessionService.GetUserRole();
            isAdmin = userRole == "admin";
            isLoading = false;


            using var context = DbFactory.CreateDbContext();
            user = await context.Users.FirstOrDefaultAsync(m => m.Id == Id);

            if (user is null)
            {
                NavigationManager.NavigateTo("notfound");
                return;
            }

            // Provera da li admin pokušava da obriše sopstveni nalog
            isSelfDelete = user.Username == loggedInUsername;

            StateHasChanged();
        }
    }

    private async Task DeleteUser()
    {
        if (isSelfDelete) return; // Sprečavamo brisanje sopstvenog naloga

        using var context = DbFactory.CreateDbContext();
        context.Users.Remove(user!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/users");
    }
}
